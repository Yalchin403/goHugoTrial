<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Yalchin's Blog</title><link>/posts/</link><description>Recent content in Posts on Yalchin's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Yalchin Mammadli</copyright><lastBuildDate>Fri, 13 May 2022 22:31:31 +0400</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>First Personal Blog</title><link>/posts/first_personal_blog/</link><pubDate>Fri, 13 May 2022 22:31:31 +0400</pubDate><guid>/posts/first_personal_blog/</guid><description>So far I was trying to keep this website&amp;rsquo;s content identical to yalchin.info/blog which is my main website where I mainly write mixed tech blogs to solve some problems. I usually write those blogs not because I&amp;rsquo;m expert at them, but I write them, first, as a reference and second, as contribution to the growing programming society. Anyway, I was planning to write this post about my switch from Android (have been using it since I got my first phone) to IOS, but then I thought I might include some personal details as well.</description><content type="html"><![CDATA[<p>So far I was trying to keep this website&rsquo;s content identical to yalchin.info/blog which is my
main website where I mainly write mixed tech blogs to solve some problems. I usually write those blogs not because I&rsquo;m
expert at them, but I write them, first, as a reference and second, as contribution to the growing programming
society. Anyway, I was planning to write this post about my switch from Android (have been using it since I got my first
phone) to IOS, but then I thought I might include some personal details as well. So it&rsquo;s not gonna be
purely tech related.</p>
<h3 id="so-why-in-the-world-i-decided-to-switch-to-ios-or-iphone-as-main-device">So, why in the world, I decided to switch to IOS or Iphone as main device?</h3>
<p>Well, there are a number of reasons, I&rsquo;m not sure if you will take them as compelling reasons or not.
First, I was already decisive that I need to replace my phone with the new one, as I have been already using the previous one
for around 4 years as of now. I was planning to pick up one of the flagship Android phones, but one thing changed my mind. <strong>THE SCREEN</strong>
So, any Android model currently popular in the market and considering it to be flagship has huge screen which is the thing
in the mobile phones that drives me crazy. I remember I made about one month of research before choosing my previous phone
and during that time I lived without phone, just because I didn&rsquo;t want to choose the wrong one. The only thing I forgot
to pay attention while choosing it was its screen, it was perfectly made for my need but the screen&hellip; It&rsquo;s about 6.5&quot; and
I always struggled to use it when I was using one of my hands. Apart from that it was perfect. The things I like about it:</p>
<ul>
<li>It had fast charging</li>
<li>About 4000 mAH (which was more than enough for me to use it full 1 day)</li>
<li>Its camera was okay for me as I&rsquo;m not selfie lover (I mostly use it to capture objects (normal objects :D))</li>
<li>Both 3.5 mm headphone jack and charging slot were mounted to the bottom of the screen (This makes it comfortable if
you want to plug the power-bank in and also use your headphone and put your phone into your pocket upside down :D)</li>
<li>Its durability, hardware, and design was okay for me</li>
<li>Its os was Android, so I knew that customizing and using Google&rsquo;s ecosystem would not be a problem for me</li>
</ul>
<p>Another disadvantage of this phone was about #ROOT. I was not able to unlock the bootloader to #root the system as it
required me to provide a code which I need to get from the manufacturer. I first thought it&rsquo;s something good that is made
for security reasons unless I found out that manufacturer actually sells that code for about $60. I was like WTF (emotional damage).
Hence, I was reminding myself till now that whenever I need to buy a new phone I need to consider things I considered at the time of buying my
previous phone and additionally consider it being compact and rootable if it&rsquo;s Android device.</p>
<p>Honestly, I researched a bit, but I was not able to find an Android phone which is compact, flagship, and also encompasses
the criteria listed above. I found a lot of phones that were okay in terms of above but screen was the main problem that I couldn&rsquo;t close my eyes on.</p>
<h3 id="prioritizing-screen-size">Prioritizing screen size</h3>
<p>Then I thought of getting an Iphone, SE (3rd gen) was first option, but I found it a bit low level as its battery
capacity was a bit low (around 2000 mAH) and also it was too compact than I wanted. Then I decided buying Iphone 11 with 6.1&quot;
screen which was okay for me. Well, you prolly asking, okaaay, but what about the big list about, is that all satisfied
in Iphone 11? Well, the answer is definitely, <strong>no</strong>. And an explanation is that I prioritized the screen and also thought
trying out Iphone and hopefully Apple eco system in the future.</p>
<h3 id="things-i-didnt-like-as-an-iphone-user">Things I didn&rsquo;t like as an Iphone user</h3>
<p>After switching to ios, I felt like I&rsquo;m missing a lot in terms
of customization that my Android phone had. Some apps are designed in a really stupid manner. Some examples include, calculator
app, clock app that I can&rsquo;t customize snooze time, Google Maps not being available for some countries (guess what? It&rsquo;s
not supported in Azerbaijan to, have we got surprised? Ofc, <strong>NO</strong>), I feel like settings are designed in a way that normal
users won&rsquo;t be able to find and customize most of the settings, I didn&rsquo;t like keyboard customization, it really disappointed
me not seeing comma in the main keyboard also being not able to add number row to the main keyboard, but keyboard accuracy seems
more accurate than my previous Android but still not perfect tbh. Another thing is about accessories that I need to buy additionally.
I needed to buy 20W fast charger as it was not provided in the box, lightening headphones or at least from lightening to 3.5
mm headphone jack switcher. Another really annoying thing is selectivity in iCloud uploads, especially photos.
I usually upload only camera rolls and ignore photos from certain apps. That&rsquo;s not the case, Apple is really curious about
all of your images and your &ldquo;privacy&rdquo; which is not in your hands in any way. Oh, one more crap, you can&rsquo;t use Amazon app in
Iphone, just because Iphone demanded Amazon to pay some proportion of their profit of an item which is bought by using Apple device.
I know it&rsquo;s absolute nonsense, but it is what it is.</p>
<h3 id="things-i-did-like-as-an-iphone-user">Things I did like as an Iphone user</h3>
<p>When it comes to some things that I liked, design seems really nice, hardware seems to be really
nice too, I don&rsquo;t feel or see any glitches or frozen screen or apps. Speaking of hardware, I really appreciate having a
manual slient mode switcher, it is really handy sometimes. The only thing that is bad about hardware is that repairment
will be really expensive in case I manage to break it somehow. Another advantage of getting an Iphone probably is long term
software update and above all, getting it at the same day with other Iphone users. That means that no matter which Iphone
model you use you won&rsquo;t need to wait for the update as we do with Androids. One thing that people usually complain about is that
even if a lot of new Iphone models appear in the market each and every year, we don&rsquo;t see a lot of differences between them, maybe
a little of design and screen size alterations. Honestly, I felt like this might be an advantage. Let me explain how&hellip;
At the moment I switch my phone after using it for years, I feel like there are a lot of differences between my old and new phone.
But with Iphone it would be different, it&rsquo;s like you buy a new one insert your sim card, transfer your data and continue
moving on.</p>
<h3 id="some-stereotypes-about-iphone">Some stereotypes about iPhone</h3>
<p>Some people say you won&rsquo;t be able to download and listen to music when you are offline. That&rsquo;s totally wrong, you can use
browsers like document browser or mozilla to download music or any other files. For music specifically you can use
<a href="https://t.me/mp3converteryoutubebot">this</a> sweet bot and listen music in your telegram app, forward, and save it easily.
You won&rsquo;t have any problem with file management in your iPhone too.</p>
<h3 id="why-im-planning-to-join-apples-ecosystem">Why I&rsquo;m planning to join Apple&rsquo;s ecosystem?</h3>
<p>Well, even though I didn&rsquo;t like iPhone in the past, I was always Mac fan, and was fascinated by its speed, power, and design.
Apart from that, I know that with synchronizing iPhone, everything will work flawlessly.</p>
<p>Another main point is that, with Mac, as a programmer, I can build mobile apps both for IOS and Android. Especially, considering
my post-graduate master&rsquo;s degree acceptance from Hungary in Mobile Development.</p>
<h3 id="how-im-going-to-overcome-disadvantages-listed-above">How I&rsquo;m going to overcome disadvantages listed above?</h3>
<p>Well, I researched some problems, solved some of them, but I need to live with some of them. Surprisingly, I&rsquo;m getting used to it.
Disturbing alarms, calculator, and unsupported apps like Google Maps (for political or economic reasons) are still of a problem.
But honestly, I don&rsquo;t feel like I&rsquo;m missing something from the world just because I don&rsquo;t use Android. Each of them has its own
special advantages and well, people will decide based on their priorities like I did with screen size.</p>
<p><strong>Thanks for reading!</strong></p>
]]></content></item><item><title>Accent and Case Insensitive Search and Minimum Distance Calculator in Pymongo</title><link>/posts/mongo_db_autocomplete/</link><pubDate>Thu, 28 Apr 2022 14:22:27 +0400</pubDate><guid>/posts/mongo_db_autocomplete/</guid><description>Ellaborate case Before starting with set up and everything, I would love to confess that I find Mongodb and Python combination as pain in the ass. Recently I have got an job offer as Python/Flask developer in one of the local companies in my country. They are using Mongodb as their production database. They requested a little bit of task to accomplish before we move on to HR interview. So the task was about coding autocomplete search logic and also finding the closest location to our current location from the database.</description><content type="html"><![CDATA[<h1 id="ellaborate-case">Ellaborate case</h1>
<p>Before starting with set up and everything, I would love to confess that I find Mongodb and Python combination as <strong>pain in the ass</strong>. Recently I have got an job offer as Python/Flask developer in one of the local companies in my country. They are using Mongodb as their production database. They requested a little bit of task to accomplish before we move on to HR interview. So the task was about coding autocomplete search logic and also finding the closest location to our current location from the database. Task seems interesting and pretty much easy to solve, at least for me as a Django developer who have used Postgresql as default database in most of the cases. However, seemed like things don&rsquo;t go so well with Mongodb in django. It seemed like if Python is envolved, we normally have two pypi packages two use, namely <a href="https://pymongo.readthedocs.io/en/stable/">pymongo</a> and <a href="https://docs.mongoengine.org/">mongoengine</a>. I was familiar with pymongo as in my <a href="https://t.me/mp3converteryoutubebot">telegram bot</a> I use Mongodb as database and use pymongo to implement database actions. Hence, below I will explain how I implemented case and accent insensitive search and minimum distance finding via pymongo.</p>
<hr>
<h1 id="database-setup">Database setup</h1>
<p>First we need to make sure we have all the dependencies to be able to run our Python modules successfully, I will name then, and also drop my requirements.txt content as well:</p>
<p>Dependencies:</p>
<ul>
<li>pymongo</li>
<li>sqlparse</li>
<li>geographiclib</li>
<li>geopy</li>
</ul>
<p>Here is the content of <code>requirements.txt</code> which you can use by running <code>pip install -r requirements.txt</code>:</p>
<pre tabindex="0"><code>backports.zoneinfo==0.2.1
geographiclib==1.52
geopy==2.2.0
pymongo==4.1.1
python-dotenv==0.20.0
sqlparse==0.2.4
</code></pre><p>Now, you can create local database or use <a href="https://cloud.mongodb.com">Mongodb atlas</a> which I personally prefered. Create database, and also get your <code>URI</code> which you will use to connect to your database via utilizing pymongo. You can watch <a href="https://www.youtube.com/watch?v=VQnmcBnguPY">this</a> video if you don&rsquo;t know how to set up remote mongodb database and configure connection via pymongo. If you want to keep your atlas account safe, do not include <code>URI</code> inside your project direcly but use <code>env</code> and some library like <a href="https://pypi.org/project/python-dotenv/">python-dotenv</a> to load <code>.env</code> content into os enviroment variables. Here is my database set up that you can use:</p>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#5bc4bf">from</span> <span style="color:#fec418">dotenv</span> <span style="color:#5bc4bf">import</span> load_dotenv
</span></span><span style="display:flex;"><span><span style="color:#5bc4bf">import</span> <span style="color:#fec418">os</span>
</span></span><span style="display:flex;"><span><span style="color:#5bc4bf">from</span> <span style="color:#fec418">pymongo</span> <span style="color:#5bc4bf">import</span> MongoClient
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>load_dotenv()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>DATABASE_URI <span style="color:#5bc4bf">=</span> os<span style="color:#5bc4bf">.</span>getenv(<span style="color:#48b685">&#34;DATABASE_URI&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client <span style="color:#5bc4bf">=</span> MongoClient(DATABASE_URI)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client <span style="color:#5bc4bf">=</span> MongoClient(DATABASE_URI)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>db <span style="color:#5bc4bf">=</span> client<span style="color:#5bc4bf">.</span>get_database(<span style="color:#48b685">&#39;autocompletedb&#39;</span>) <span style="color:#776e71"># here autocompletedb is the name of database</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#776e71"># This is added so that many files can reuse the function get_database()</span>
</span></span><span style="display:flex;"><span>addresses_table <span style="color:#5bc4bf">=</span> db<span style="color:#5bc4bf">.</span>addresses <span style="color:#776e71"># here the addresses is the name of table inside autocomplete database</span>
</span></span></code></pre></div><hr>
<h1 id="minimum-distance-calculation">Minimum distance calculation</h1>
<p>MongoDB supports query operations on geospatial data so we can take advantage of this functionality without writing our own formula two calculate minimum distance between two coordinates containing latitude and longitude. I found <a href="https://towardsdatascience.com/finding-distance-between-two-latitudes-and-longitudes-in-python-43e92d6829ff">this</a> very interesting if you are interested in the math side of the case. If not, you can use below snippet:</p>
<p>First ensure that you have a proper index in the database:</p>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#5bc4bf">from</span> <span style="color:#fec418">pymongo</span> <span style="color:#5bc4bf">import</span> MongoClient, GEOSPHERE
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>client <span style="color:#5bc4bf">=</span> MongoClient()
</span></span><span style="display:flex;"><span>collection <span style="color:#5bc4bf">=</span> db[<span style="color:#48b685">&#39;COLLECTION_NAME&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#776e71"># create index</span>
</span></span><span style="display:flex;"><span>collection<span style="color:#5bc4bf">.</span>create_index([(<span style="color:#48b685">&#39;geo&#39;</span>, GEOSPHERE)])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#776e71"># store GPS coordinates in db</span>
</span></span></code></pre></div><p>And make sure you keep your latitude and longitude that way:</p>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>lat <span style="color:#5bc4bf">=</span> <span style="color:#5bc4bf">...</span>
</span></span><span style="display:flex;"><span>lon <span style="color:#5bc4bf">=</span> <span style="color:#5bc4bf">...</span>
</span></span><span style="display:flex;"><span>item <span style="color:#5bc4bf">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#48b685">&#39;geo&#39;</span>: {
</span></span><span style="display:flex;"><span>      <span style="color:#48b685">&#39;type&#39;</span>: <span style="color:#48b685">&#34;Point&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#48b685">&#39;coordinates&#39;</span>: [lon, lat]
</span></span><span style="display:flex;"><span>  }  
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>collection<span style="color:#5bc4bf">.</span>insert_one(item)  
</span></span></code></pre></div><p>As you have index and proper data in place, you can start retrieving it:</p>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#815ba4">def</span> <span style="color:#06b6ef">calculate_distance</span>(coordinates):
</span></span><span style="display:flex;"><span>    latitude, longitude <span style="color:#5bc4bf">=</span> coordinates
</span></span><span style="display:flex;"><span>    items <span style="color:#5bc4bf">=</span> addresses_table<span style="color:#5bc4bf">.</span>find({<span style="color:#48b685">&#39;geo&#39;</span>: {<span style="color:#48b685">&#34;$nearSphere&#34;</span>: [latitude, longitude], <span style="color:#48b685">&#34;$maxDistance&#34;</span>: <span style="color:#f99b15">5000</span>}})
</span></span><span style="display:flex;"><span>    <span style="color:#815ba4">for</span> item <span style="color:#5bc4bf">in</span> items:
</span></span><span style="display:flex;"><span>        <span style="color:#815ba4">return</span> item
</span></span></code></pre></div><p>This will take coordinates as tuple and from the database and find the coordinates with minimum distance relative to the given coordinates (<code>max_distance = 5 km</code>)</p>
<h1 id="accent-and-case-insensitive-search">Accent and Case Insensitive Search</h1>
<p>This part was a bit tricky, as I couldn&rsquo;t make the accent insensitive search work using different function shown in the documentation, they somehow didn&rsquo;t work properly. I used regular expression with <code>i</code> option to ignore case sensitivity and searched for the given keywork from different fields in my collection. Additionally to consider accent, based on keyword, I created other versions of the keyword (considering accent). For example if someone searchs for Helen, I will be searching for both <code>Helen</code> and <code>Hélen</code> and vice versa. Below its implemnetation is given:</p>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#815ba4">def</span> <span style="color:#06b6ef">normalize_keyword</span>(keyword):
</span></span><span style="display:flex;"><span>  keyword <span style="color:#5bc4bf">=</span> keyword<span style="color:#5bc4bf">.</span>lower()
</span></span><span style="display:flex;"><span>  variants <span style="color:#5bc4bf">=</span> {<span style="color:#48b685">&#39;ə&#39;</span>: [<span style="color:#48b685">&#39;e&#39;</span>, <span style="color:#48b685">&#39;a&#39;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#48b685">&#39;ı&#39;</span>: [<span style="color:#48b685">&#39;i&#39;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#48b685">&#39;ç&#39;</span>: [<span style="color:#48b685">&#39;c&#39;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#48b685">&#39;ş&#39;</span>: [<span style="color:#48b685">&#39;s&#39;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#48b685">&#39;ö&#39;</span>: [<span style="color:#48b685">&#39;o&#39;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#48b685">&#39;ğ&#39;</span>: [<span style="color:#48b685">&#39;g&#39;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#48b685">&#39;e&#39;</span>: [<span style="color:#48b685">&#39;ə&#39;</span>, <span style="color:#48b685">&#39;a&#39;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#48b685">&#39;a&#39;</span>: [<span style="color:#48b685">&#39;ə&#39;</span>, <span style="color:#48b685">&#39;e&#39;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#48b685">&#39;i&#39;</span>: [<span style="color:#48b685">&#39;ı&#39;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#48b685">&#39;c&#39;</span>: [<span style="color:#48b685">&#39;ç&#39;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#48b685">&#39;s&#39;</span>: [<span style="color:#48b685">&#39;ş&#39;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#48b685">&#39;o&#39;</span>: [<span style="color:#48b685">&#39;ö&#39;</span>],
</span></span><span style="display:flex;"><span>        <span style="color:#48b685">&#39;g&#39;</span>: [<span style="color:#48b685">&#39;ğ&#39;</span>]
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  possibilities <span style="color:#5bc4bf">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#815ba4">for</span> letter <span style="color:#5bc4bf">in</span> keyword:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#815ba4">if</span> letter <span style="color:#5bc4bf">in</span> variants:
</span></span><span style="display:flex;"><span>      substitutes <span style="color:#5bc4bf">=</span> variants[letter]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#815ba4">for</span> substitute <span style="color:#5bc4bf">in</span> substitutes:
</span></span><span style="display:flex;"><span>        possibilities<span style="color:#5bc4bf">.</span>append(keyword<span style="color:#5bc4bf">.</span>replace(letter, substitute))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  possibilities <span style="color:#5bc4bf">=</span> set(possibilities)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#815ba4">return</span> possibilities
</span></span></code></pre></div><p>As mentioned with the help of above function and regex search we implement the search funcionality:</p>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#815ba4">def</span> <span style="color:#06b6ef">apply_multiple_filters</span>(keywords):
</span></span><span style="display:flex;"><span>    keywords <span style="color:#5bc4bf">=</span> normalize_keyword(keywords)
</span></span><span style="display:flex;"><span>    results <span style="color:#5bc4bf">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#815ba4">for</span> keyword <span style="color:#5bc4bf">in</span> keywords:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        results<span style="color:#5bc4bf">.</span>append(addresses_table<span style="color:#5bc4bf">.</span>find({<span style="color:#48b685">&#39;$or&#39;</span>: [
</span></span><span style="display:flex;"><span>                            {<span style="color:#48b685">&#39;city&#39;</span>: {<span style="color:#48b685">&#39;$regex&#39;</span>: keyword, <span style="color:#48b685">&#39;$options&#39;</span>: <span style="color:#48b685">&#39;i&#39;</span>}},
</span></span><span style="display:flex;"><span>                            {<span style="color:#48b685">&#39;street&#39;</span>: {<span style="color:#48b685">&#39;$regex&#39;</span>: keyword, <span style="color:#48b685">&#39;$options&#39;</span>: <span style="color:#48b685">&#39;i&#39;</span>}},
</span></span><span style="display:flex;"><span>                            {<span style="color:#48b685">&#39;street_number&#39;</span>: {<span style="color:#48b685">&#39;$regex&#39;</span>: keyword, <span style="color:#48b685">&#39;$options&#39;</span>: <span style="color:#48b685">&#39;i&#39;</span>}}
</span></span><span style="display:flex;"><span>                        ]
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>        ))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#815ba4">return</span> results
</span></span></code></pre></div>]]></content></item><item><title>Docker Compose for Elastic Search and Kibana</title><link>/posts/docker-compose-for-elastic-search-and-kibana/</link><pubDate>Sun, 24 Apr 2022 14:36:58 +0400</pubDate><guid>/posts/docker-compose-for-elastic-search-and-kibana/</guid><description>Command: docker-compose -f docker-compose.yml up -d Content of docker-compose.yml: version: &amp;#39;3.7&amp;#39; services: elasticsearch: image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0 container_name: elasticsearch restart: always environment: - xpack.security.enabled=false - discovery.type=single-node ulimits: memlock: soft: -1 hard: -1 nofile: soft: 65536 hard: 65536 cap_add: - IPC_LOCK volumes: - elasticsearch-data-volume:/usr/share/elasticsearch/data ports: - 9200:9200 kibana: container_name: kibana image: docker.elastic.co/kibana/kibana:7.4.0 restart: always environment: - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 ports: - 5601:5601 depends_on: - elasticsearch volumes: elasticsearch-data-volume: driver: local</description><content type="html"><![CDATA[<h3 id="command">Command:</h3>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>    docker-compose -f docker-compose.yml up -d
</span></span></code></pre></div><h3 id="content-of-docker-composeyml">Content of docker-compose.yml:</h3>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span>    <span style="color:#5bc4bf">version</span>: <span style="color:#48b685">&#39;3.7&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#5bc4bf">services</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#5bc4bf">elasticsearch</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">image</span>: <span style="color:#f99b15">docker.elastic.co/elasticsearch/elasticsearch:7.4.0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">container_name</span>: <span style="color:#f99b15">elasticsearch</span>
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">restart</span>: <span style="color:#f99b15">always</span>
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">environment</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f99b15">xpack.security.enabled=false</span>
</span></span><span style="display:flex;"><span>          - <span style="color:#f99b15">discovery.type=single-node</span>
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">ulimits</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#5bc4bf">memlock</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#5bc4bf">soft</span>: -<span style="color:#f99b15">1</span>
</span></span><span style="display:flex;"><span>            <span style="color:#5bc4bf">hard</span>: -<span style="color:#f99b15">1</span>
</span></span><span style="display:flex;"><span>          <span style="color:#5bc4bf">nofile</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#5bc4bf">soft</span>: <span style="color:#f99b15">65536</span>
</span></span><span style="display:flex;"><span>            <span style="color:#5bc4bf">hard</span>: <span style="color:#f99b15">65536</span>
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">cap_add</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f99b15">IPC_LOCK</span>
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">volumes</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f99b15">elasticsearch-data-volume:/usr/share/elasticsearch/data</span>
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">ports</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f99b15">9200</span>:<span style="color:#f99b15">9200</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>      <span style="color:#5bc4bf">kibana</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">container_name</span>: <span style="color:#f99b15">kibana</span>
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">image</span>: <span style="color:#f99b15">docker.elastic.co/kibana/kibana:7.4.0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">restart</span>: <span style="color:#f99b15">always</span>
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">environment</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f99b15">ELASTICSEARCH_HOSTS=http://elasticsearch:9200</span>
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">ports</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f99b15">5601</span>:<span style="color:#f99b15">5601</span>
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">depends_on</span>:
</span></span><span style="display:flex;"><span>          - <span style="color:#f99b15">elasticsearch</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#5bc4bf">volumes</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#5bc4bf">elasticsearch-data-volume</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">driver</span>: <span style="color:#f99b15">local</span>
</span></span></code></pre></div>]]></content></item><item><title>How to Deploy NodeJs App</title><link>/posts/how-to-deploy-nodejs-app/</link><pubDate>Sat, 23 Apr 2022 20:33:34 +0400</pubDate><guid>/posts/how-to-deploy-nodejs-app/</guid><description>In this tutorial, we will be deploying a simple URL shortener API built-in express framework of NodeJs. It is pretty simple, uses MongoDB as its database, and you can find its source code: https://yalchin.ml/Cq93RQ.
As a VPS, I use a Linode ubuntu server, and I assume that you have at least some basic knowledge when it comes to Linux.
Install Node and NPM curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - sudo apt install nodejs # verify that bash is installed node --version Clone your Repo git clone [link to your github repo] Install npm dependency packages cd yourproject npm install npm start (or whatever your start command) # stop app ctrl+C To be able to run our app in the background continuously, we will be using a package called PM2.</description><content type="html"><![CDATA[<p>In this tutorial, we will be deploying a simple URL shortener API built-in express framework of NodeJs. It is pretty simple, uses MongoDB as its database, and you can find its source code: <a href="https://yalchin.ml/Cq93RQ">https://yalchin.ml/Cq93RQ</a>.</p>
<p>As a VPS, I use a Linode ubuntu server, and I assume that you have at least some basic knowledge when it comes to Linux.</p>
<h3 id="install-node-and-npm">Install Node and NPM</h3>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>    curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    sudo apt install nodejs
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#776e71"># verify that bash is installed</span>
</span></span><span style="display:flex;"><span>    node --version
</span></span></code></pre></div><h3 id="clone-your-repo">Clone your Repo</h3>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>    git clone <span style="color:#5bc4bf">[</span>link to your github repo<span style="color:#5bc4bf">]</span>
</span></span></code></pre></div><h3 id="install-npm-dependency-packages">Install npm dependency packages</h3>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>    cd yourproject
</span></span><span style="display:flex;"><span>    npm install
</span></span><span style="display:flex;"><span>    npm start <span style="color:#5bc4bf">(</span>or whatever your start command<span style="color:#5bc4bf">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#776e71"># stop app</span>
</span></span><span style="display:flex;"><span>    ctrl+C
</span></span></code></pre></div><p>To be able to run our app in the background continuously, we will be using a package called <strong>PM2</strong>. It is a daemon process manager that will help you manage and keep your application online.</p>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>    sudo npm i pm2 -g
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#776e71">#(name of your appfile can be different)</span>
</span></span><span style="display:flex;"><span>    pm2 start app
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#776e71"># Other pm2 commands</span>
</span></span><span style="display:flex;"><span>    pm2 show app
</span></span><span style="display:flex;"><span>    pm2 status
</span></span><span style="display:flex;"><span>    pm2 restart app
</span></span><span style="display:flex;"><span>    pm2 stop app
</span></span><span style="display:flex;"><span>    pm2 logs <span style="color:#5bc4bf">(</span>Show log stream<span style="color:#5bc4bf">)</span>
</span></span><span style="display:flex;"><span>    pm2 flush <span style="color:#5bc4bf">(</span>Clear logs<span style="color:#5bc4bf">)</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#776e71"># To make sure app starts when reboot</span>
</span></span><span style="display:flex;"><span>    pm2 startup ubuntu
</span></span></code></pre></div><p>You should now be able to access your app using your IP and port. Now we want to set up a firewall blocking that port and set up NGINX as a reverse proxy so we can access it directly using port 80 (HTTP)</p>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#776e71">### Set up a ufw firewall</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sudo ufw enable
</span></span><span style="display:flex;"><span>    sudo ufw status
</span></span><span style="display:flex;"><span>    sudo ufw allow ssh <span style="color:#5bc4bf">(</span>Port 22<span style="color:#5bc4bf">)</span>
</span></span><span style="display:flex;"><span>    sudo ufw allow http <span style="color:#5bc4bf">(</span>Port 80<span style="color:#5bc4bf">)</span>
</span></span><span style="display:flex;"><span>    sudo ufw allow https <span style="color:#5bc4bf">(</span>Port 443<span style="color:#5bc4bf">)</span>
</span></span></code></pre></div><h3 id="configure-and-install-nginx">Configure and install NGINX</h3>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sudo apt install nginx
</span></span></code></pre></div><p>Navigate into</p>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>    cd /etc/nginx/sites-enabled
</span></span></code></pre></div><p>and create a config file for Nginx, name it as your domain. In my case my domain is api.kydev.ml, so I will be naming it as api.kydev.ml.conf . To create a file you can use the touch command or directly open a file with vim, if the file doesn&rsquo;t exist, vim will create a one and open it for you. So use the method below to create:</p>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>    touch api.kydev.ml.conf
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#776e71"># OR</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    vim api.kydev.ml.conf
</span></span></code></pre></div><p>If you are not familiar with vim, for now, use touch command but for the future, you can take a look at <a href="https://yalchin.info/blog/written-tutorial-on-vim/">this cheat sheet</a> to learn it.</p>
<p>Open the file you have created with your favorite editor, in my case:</p>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>    sudo vim /etc/nginx/sites-available/api.kydev.ml.conf
</span></span></code></pre></div><p>Add the following snippet, but don&rsquo;t forget to modify it for your needs:</p>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>    server <span style="color:#5bc4bf">{</span>
</span></span><span style="display:flex;"><span>    server_name yourdomain.com www.yourdomain.com;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>        location / <span style="color:#5bc4bf">{</span>
</span></span><span style="display:flex;"><span>            proxy_pass http://localhost:5000; <span style="color:#776e71">#whatever port your app runs on</span>
</span></span><span style="display:flex;"><span>            proxy_http_version 1.1;
</span></span><span style="display:flex;"><span>            proxy_set_header Upgrade <span style="color:#ef6155">$http_upgrade</span>;
</span></span><span style="display:flex;"><span>            proxy_set_header Connection <span style="color:#48b685">&#39;upgrade&#39;</span>;
</span></span><span style="display:flex;"><span>            proxy_set_header Host <span style="color:#ef6155">$host</span>;
</span></span><span style="display:flex;"><span>            proxy_cache_bypass <span style="color:#ef6155">$http_upgrade</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#5bc4bf">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#5bc4bf">}</span>
</span></span></code></pre></div><h3 id="check-nginx-config">Check NGINX config:</h3>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>    <span style="color:#776e71"># Check NGINX config</span>
</span></span><span style="display:flex;"><span>    sudo nginx -t
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#776e71"># Restart NGINX</span>
</span></span><span style="display:flex;"><span>    sudo service nginx restart
</span></span></code></pre></div><p>You should now be able to visit your IP with no port (port 80) and see your app. Now let&rsquo;s add a domain. <strong>Congrats!</strong></p>
<h3 id="add-the-domain">Add the domain</h3>
<p>Add an A record for @ and for www to your droplet, It may take a bit to propagate</p>
<h3 id="add-ssl-with-letsencrypt">Add SSL with LetsEncrypt</h3>
<div class="highlight"><pre tabindex="0" style="color:#e7e9db;background-color:#2f1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>    sudo add-apt-repository ppa:certbot/certbot
</span></span><span style="display:flex;"><span>    sudo apt-get update
</span></span><span style="display:flex;"><span>    sudo apt-get install python-certbot-nginx
</span></span><span style="display:flex;"><span>    sudo certbot --nginx -d yourdomain.com -d www.yourdomain.com
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#776e71"># Only valid for 90 days, test the renewal process with</span>
</span></span><span style="display:flex;"><span>    certbot renew --dry-run
</span></span></code></pre></div><p>You should now be able to visit your domain and see your Node app up and running securely!</p>
<p><strong>Thanks for reading!</strong></p>
]]></content></item></channel></rss>