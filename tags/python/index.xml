<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Yalchin's Blog</title><link>/tags/python/</link><description>Recent content in Python on Yalchin's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Yalchin Mammadli</copyright><lastBuildDate>Thu, 28 Apr 2022 14:22:27 +0400</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Accent and Case Insensitive Search and Minimum Distance Calculator in Pymongo</title><link>/posts/mongo_db_autocomplete/</link><pubDate>Thu, 28 Apr 2022 14:22:27 +0400</pubDate><guid>/posts/mongo_db_autocomplete/</guid><description>Ellaborate case Before starting with set up and everything, I would love to confess that I find Mongodb and Python combination as pain in the ass. Recently I have got an job offer as Python/Flask developer in one of the local companies in my country. They are using Mongodb as their production database. They requested a little bit of task to accomplish before we move on to HR interview. So the task was about coding autocomplete search logic and also finding the closest location to our current location from the database.</description></item><item><title>Sorting Algorithms and Binary Search in Python</title><link>/posts/sorting-algorithms-and-binary-search-in-python/</link><pubDate>Sun, 24 Apr 2022 14:20:57 +0400</pubDate><guid>/posts/sorting-algorithms-and-binary-search-in-python/</guid><description>Selection Sort Selection sort is about selecting the minimum value in an unsorted array and moving it towards the front by comparing. Here is an example code snippet to implement binary search in Python:
def selection_sort(list_): length = len(list_) for index in range(length - 1): min = list_[index] for j in range(index+ 1, length): if list_[j] &amp;lt; min: min = list_[j] list_[j], list_[index] = list_[index], list_[j] return list_ unsorted_list = [7,8,9,8,7,6,5,6,7,8,9,8,7,6,5,6,7,8,0] selection_sort(unsorted_list) Buble Sort The bubble sort algorithm is applied by going through an array of data a number of times and at the same time comparing two adjacent numbers at a time in order to reorder them if there are out of order.</description></item><item><title>Map, Sort, and Filter Functions in Python</title><link>/posts/map-sort-and-filter-functions-in-python/</link><pubDate>Sat, 23 Apr 2022 23:03:25 +0400</pubDate><guid>/posts/map-sort-and-filter-functions-in-python/</guid><description>This tutorial will help you to see real example of using map, sort, and filter functions along with lambda functions in Python.
Map Function Example
Python&amp;rsquo;s map() is a built-in function that allows you to process and transform all the items in an iterable without using an explicit for loop, a technique commonly known as mapping. map() is useful when you need to apply a transformation function to each item in an iterable and transform them into a new iterable.</description></item></channel></rss>